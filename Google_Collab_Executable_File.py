# -*- coding: utf-8 -*-
"""Kaggle_80%_epoch_10_Abhishank_Gaba_20481729_Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tDSTbBsaV3aypK7N1_VseubrJMB0sSkO
"""

import tensorflow as tf
tf.enable_eager_execution()
import pandas as pd
import numpy as np
import tensorflow.keras as keras
from keras.models import Sequential 
from keras.layers import Convolution2D as Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense
from IPython.display import display
from PIL import Image 
from skimage.transform import rescale, resize, downscale_local_mean
from keras.applications.vgg16 import preprocess_input
from keras.regularizers import l2
from google.colab import files



#read data 
train_df = np.load("train_x.npy")

train_label_df = np.load ("train_label.npy")

test_df = np.load ("test_x.npy")


# unique classes
classes = np.unique(train_label_df)
class_dict = {cls: i for i, cls in enumerate(classes)}

# tf readable labels
Y = [np.eye(len(classes))[class_dict[label]] for label in train_label_df]

X_ds = tf.data.Dataset\
    .from_tensor_slices(train_df)

ds_iter = iter(X_ds)

Y_ds = tf.data.Dataset\
    .from_tensor_slices(Y)

ds_iter = iter(Y_ds)

print(next(ds_iter).numpy())

ds = tf.data.Dataset.zip((X_ds, Y_ds))\
    .batch(32)\
    .repeat(1000)

ds_iter = iter(ds)
print(next(ds_iter))

model = keras.Sequential([
    keras.layers.Conv2D(32, (3, 3), activation='relu', padding='same', kernel_regularizer=l2(0.0005), input_shape=(168, 308, 3)),
    keras.layers.Conv2D(32, (3, 3), activation='relu', padding='same', kernel_regularizer=l2(0.0005), input_shape=(168, 308, 3)),
    keras.layers.MaxPool2D((2, 2)),
        
    keras.layers.Conv2D(64, (3, 3), padding='same', activation='relu'),
    keras.layers.Conv2D(64, (3, 3), padding='same', activation='relu'),
    keras.layers.MaxPool2D((2, 2)),
        
    keras.layers.Conv2D(128, (3, 3),padding='same', activation='relu'),
    keras.layers.Conv2D(128, (3, 3),padding='same', activation='relu'),
    keras.layers.MaxPool2D((2, 2)),
    keras.layers.Flatten(),

    
    keras.layers.Dense(512, activation='relu'),

    keras.layers.Dense(len(classes))
]);

model.summary()

optimizer = tf.train.AdamOptimizer(1e-4)
model.compile(optimizer=optimizer, loss=tf.losses.softmax_cross_entropy, metrics=['accuracy'])

model.fit( 
    ds,
    steps_per_epoch=100,
    epochs=10,
    verbose = 1)

predictions = model.predict(test_df)
predictions = np.argmax (predictions, axis=1)
print (predictions)

result_df = pd.DataFrame({'Id': list(range(len(predictions))), 'Predicted': predictions})
result_df.to_csv('results.csv', index=False)

files.download('results.csv')

